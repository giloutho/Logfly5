/* 
 * Copyright Gil THOMAS
 * This file forms an integral part of Logfly project
 * See the LICENSE file distributed with source code
 * for details of Logfly licence project
 */
package org.logfly.littlewins;

import java.io.File;
import java.util.Map;
import java.util.logging.Level;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.stage.Modality;
import javafx.stage.Stage;

import org.logfly.dialog.alertbox;
import org.logfly.settings.configProg;
import org.logfly.settings.privateData;
import org.logfly.systemio.mylogging;
import org.logfly.systemio.textio;
import org.logfly.systemio.webio;
import org.xnap.commons.i18n.I18n;
import org.xnap.commons.i18n.I18nFactory;

/**
 *
 * @author gil
 * 
 * Display the logfile generated by mylogging class
 * The user can sent it to support
 * 
 */
public class winLog {
    private String logTxt;
    private configProg myConfig;
    private I18n i18n; 
    
    TextField txtAdress;
    TextArea txtLog;
    
    public winLog(configProg currConfig, int pAction) {
        myConfig = currConfig;
        i18n = I18nFactory.getI18n("","lang/Messages",winLog.class.getClass().getClassLoader(),myConfig.getLocale(),0);    
        switch (pAction) {
            case 0:
                readLogFile();
                break;
            case 1:
                reportSystem();
                break;
        }
        showText();
    }
    
    private void reportSystem() {
        StringBuilder sbReport = new StringBuilder();
        for (Map.Entry<?,?> e : System.getProperties().entrySet()) {
            sbReport.append(String.format("%s = %s", e.getKey(), e.getValue())).append("\r\n");            
        }   
        logTxt = sbReport.toString();
    }
       
    private void readLogFile() {
        logTxt = org.logfly.systemio.mylogging.readLogFile();
    }
       
    private void showText() {
        
        Stage subStage = new Stage();
        
        final VBox vbox = new VBox();
        vbox.setPadding(new Insets(10));
        vbox.setSpacing(5);
        
        Label lbMail = new Label();
        lbMail.setText(i18n.tr("Votre adresse mail"));
        txtAdress = new TextField();
        txtAdress.setText(myConfig.getPiloteMail());
        txtLog = new TextArea();
        txtLog.setWrapText(true);
        txtLog.setText(logTxt);
        txtLog.setEditable(false);
        // for buttons
        HBox buttonBar = new HBox();
        buttonBar.setPadding(new Insets(6));
        buttonBar.setSpacing(5);
        buttonBar.setAlignment(Pos.CENTER_RIGHT);
        Button btSend = new Button(i18n.tr("Envoyer"));
        btSend.setOnAction((event) -> {
            logSend();
            subStage.close();
        });
        Button btClose = new Button(i18n.tr("Fermer"));
        btClose.setOnAction((event) -> {            
            subStage.close();
        });
        buttonBar.getChildren().addAll(btSend, btClose);
        
        vbox.getChildren().addAll(lbMail,txtAdress,txtLog, buttonBar);
        
        StackPane subRoot = new StackPane();
        subRoot.getChildren().add(vbox);
        
        Scene secondScene = new Scene(subRoot, 500, 250);
        // modal mode
        subStage.initModality(Modality.APPLICATION_MODAL);        
        subStage.setScene(secondScene);     
        subStage.showAndWait();
    }
    
    private void logSend() {
        
        String mailAd = txtAdress.getText();        
        if (mailAd == null || mailAd.equals("")) {
            mailAd = "anonymous@logfly.org";
        }
        String sup_nom = myConfig.getDefaultPilote();
        String sup_adresse = mailAd;
        String sup_os = "";
        switch (myConfig.getOS()) {
            case WINDOWS :
                sup_os = "Windows";
                break;
            case MACOS :
                sup_os = "Mac Os";
                break;
            case LINUX :
                sup_os = "Linux";
                break;
        }
        String sup_Gps = "Inconnu";
        String sup_categ = "Support";
        String sup_message = logTxt;

        // imposed by our php support script
        String sup_full_name = "full_name";
        String sup_email = "email";
        String sup_phone = "phone";
        String sup_city = "city";
        String sup_subject = "subject";
        String sup_comments = "comments";

        StringBuilder sbParam = new StringBuilder();
        sbParam.append(sup_full_name).append("=").append(sup_nom);
        sbParam.append("&").append(sup_email).append("=").append(sup_adresse);
        sbParam.append("&").append(sup_phone).append("=").append(sup_os);
        sbParam.append("&").append(sup_city).append("=").append(sup_Gps);
        sbParam.append("&").append(sup_subject).append("=").append(sup_categ);
        sbParam.append("&").append(sup_comments).append("=").append(sup_message);    

        try {
            webio sendMsg = new webio();
            int res = sendMsg.sendPost(privateData.phpSupport.toString(),sbParam.toString());
            if (res ==200) {
                alertbox aOk = new alertbox(myConfig.getLocale());
                aOk.alertInfo(i18n.tr("Fichier envoyé au support")); 
            } else {
                StringBuilder errMsg = new StringBuilder(i18n.tr("Le message n'a pas pu être envoyé"));
                errMsg.append(" [ error ").append(String.valueOf(res)).append("]");                    
                alertbox aError = new alertbox(myConfig.getLocale());
                aError.alertInfo(errMsg.toString()); 
                mylogging.log(Level.SEVERE, errMsg.toString());
            }
        } catch (Exception e) {
            alertbox aError = new alertbox(myConfig.getLocale());
            aError.alertInfo(i18n.tr("Le message n'a pas pu être envoyé")); 
            StringBuilder sbError = new StringBuilder(this.getClass().getName()+"."+Thread.currentThread().getStackTrace()[1].getMethodName());
            sbError.append("\r\n").append(e.toString());
            mylogging.log(Level.SEVERE, sbError.toString());
        }                
    }
    
}
